package backward;
import com.ftn.sbnz.model.models.Team;
import com.ftn.sbnz.model.models.Player;
import com.ftn.sbnz.model.models.TeamType;
import com.ftn.sbnz.model.models.Condition;
import com.ftn.sbnz.model.models.ConditionType;

rule "A - Our team average rating 3 less than opponent team"
salience 100
when
    $yourTeam : Team(teamType == TeamType.YOUR_TEAM)
    $opponentTeam : Team(teamType == TeamType.OPPONENT_TEAM)

    $yourAverageRating : Double() from accumulate(
        Player($pace : pace, $shooting : shooting, $dribbling : dribbling, $passing : passing, $defending : defending, $physical : physical) from $yourTeam.getPlayers(),
        average(($pace + $shooting + $dribbling + $passing + $defending + $physical) / 6.0)
    )

    $opponentAverageRating : Double() from accumulate(
        Player($pace : pace, $shooting : shooting, $dribbling : dribbling, $passing : passing, $defending : defending, $physical : physical) from $opponentTeam.getPlayers(),
        average(($pace + $shooting + $dribbling + $passing + $defending + $physical) / 6.0)
    )

    eval($yourAverageRating < $opponentAverageRating - 3)
then
    System.out.println("Your Team Average Rating: " + $yourAverageRating);
    System.out.println("Opponent Team Average Rating: " + $opponentAverageRating);
    insertLogical(new Condition(ConditionType.A));
end

rule "B - Average ratings difference is within 3"
salience 90
when
    $yourTeam : Team(teamType == TeamType.YOUR_TEAM)
    $opponentTeam : Team(teamType == TeamType.OPPONENT_TEAM)

    $yourAverageRating : Double() from accumulate(
        Player($pace : pace, $shooting : shooting, $dribbling : dribbling, $passing : passing, $defending : defending, $physical : physical) from $yourTeam.getPlayers(),
        average(($pace + $shooting + $dribbling + $passing + $defending + $physical) / 6.0)
    )

    $opponentAverageRating : Double() from accumulate(
        Player($pace : pace, $shooting : shooting, $dribbling : dribbling, $passing : passing, $defending : defending, $physical : physical) from $opponentTeam.getPlayers(),
        average(($pace + $shooting + $dribbling + $passing + $defending + $physical) / 6.0)
    )

    eval(Math.abs($yourAverageRating - $opponentAverageRating) <= 3)
then
    insertLogical(new Condition(ConditionType.B));
end

rule "C - Our team average rating 3 greater than opponent team"
salience 80
when
    $yourTeam : Team(teamType == TeamType.YOUR_TEAM)
    $opponentTeam : Team(teamType == TeamType.OPPONENT_TEAM)

    $yourAverageRating : Double() from accumulate(
        Player($pace : pace, $shooting : shooting, $dribbling : dribbling, $passing : passing, $defending : defending, $physical : physical) from $yourTeam.getPlayers(),
        average(($pace + $shooting + $dribbling + $passing + $defending + $physical) / 6.0)
    )

    $opponentAverageRating : Double() from accumulate(
        Player($pace : pace, $shooting : shooting, $dribbling : dribbling, $passing : passing, $defending : defending, $physical : physical) from $opponentTeam.getPlayers(),
        average(($pace + $shooting + $dribbling + $passing + $defending + $physical) / 6.0)
    )

    eval($yourAverageRating > $opponentAverageRating + 3)
then
    insertLogical(new Condition(ConditionType.C));
end

rule "D - Opponent team worst attributes are passing and dribbling"
salience 70
when
    $opponentTeam : Team(teamType == TeamType.OPPONENT_TEAM)

    $averagePassing : Double() from accumulate(
        Player($passing : passing) from $opponentTeam.getPlayers(),
        average($passing)
    )

    $averageDribbling : Double() from accumulate(
        Player($dribbling : dribbling) from $opponentTeam.getPlayers(),
        average($dribbling)
    )

    $averagePace : Double() from accumulate(
        Player($pace : pace) from $opponentTeam.getPlayers(),
        average($pace)
    )

    $averageShooting : Double() from accumulate(
        Player($shooting : shooting) from $opponentTeam.getPlayers(),
        average($shooting)
    )

    $averageDefending : Double() from accumulate(
        Player($defending : defending) from $opponentTeam.getPlayers(),
        average($defending)
    )

    $averagePhysical : Double() from accumulate(
        Player($physical : physical) from $opponentTeam.getPlayers(),
        average($physical)
    )

    eval($averagePassing <= $averagePace && $averagePassing <= $averageShooting && $averagePassing <= $averageDefending && $averagePassing <= $averagePhysical)
    eval($averageDribbling <= $averagePace && $averageDribbling <= $averageShooting && $averageDribbling <= $averageDefending && $averageDribbling <= $averagePhysical)
then
    insertLogical(new Condition(ConditionType.D));
end

rule "E - Opponent team worst attribute is physical"
salience 60
when
    $opponentTeam : Team(teamType == TeamType.OPPONENT_TEAM)

    $averagePhysical : Double() from accumulate(
        Player($physical : physical) from $opponentTeam.getPlayers(),
        average($physical)
    )

    $averagePace : Double() from accumulate(
        Player($pace : pace) from $opponentTeam.getPlayers(),
        average($pace)
    )

    $averageShooting : Double() from accumulate(
        Player($shooting : shooting) from $opponentTeam.getPlayers(),
        average($shooting)
    )

    $averageDribbling : Double() from accumulate(
        Player($dribbling : dribbling) from $opponentTeam.getPlayers(),
        average($dribbling)
    )

    $averagePassing : Double() from accumulate(
        Player($passing : passing) from $opponentTeam.getPlayers(),
        average($passing)
    )

    $averageDefending : Double() from accumulate(
        Player($defending : defending) from $opponentTeam.getPlayers(),
        average($defending)
    )

    eval($averagePhysical <= $averagePace && $averagePhysical <= $averageShooting && $averagePhysical <= $averageDribbling && $averagePhysical <= $averagePassing && $averagePhysical <= $averageDefending)
then
    insertLogical(new Condition(ConditionType.E));
end

rule "H - Opponent team worst attribute is pace"
salience 50
when
    $opponentTeam : Team(teamType == TeamType.OPPONENT_TEAM)

    $averagePace : Double() from accumulate(
        Player($pace : pace) from $opponentTeam.getPlayers(),
        average($pace)
    )

    $averageShooting : Double() from accumulate(
        Player($shooting : shooting) from $opponentTeam.getPlayers(),
        average($shooting)
    )

    $averageDribbling : Double() from accumulate(
        Player($dribbling : dribbling) from $opponentTeam.getPlayers(),
        average($dribbling)
    )

    $averagePassing : Double() from accumulate(
        Player($passing : passing) from $opponentTeam.getPlayers(),
        average($passing)
    )

    $averageDefending : Double() from accumulate(
        Player($defending : defending) from $opponentTeam.getPlayers(),
        average($defending)
    )

    $averagePhysical : Double() from accumulate(
        Player($physical : physical) from $opponentTeam.getPlayers(),
        average($physical)
    )

    eval($averagePace <= $averageShooting && $averagePace <= $averageDribbling && $averagePace <= $averagePassing && $averagePace <= $averageDefending && $averagePace <= $averagePhysical)
then
    insertLogical(new Condition(ConditionType.H));
end

rule "J - None of D, E, H are true"
salience 40
when
    not (Condition(type == ConditionType.D) or Condition(type == ConditionType.E) or Condition(type == ConditionType.H))
then
    insertLogical(new Condition(ConditionType.J));
end

rule "K - Our team's average physical is greater than other attributes by 3"
salience 30
when
    $yourTeam : Team(teamType == TeamType.YOUR_TEAM)

    $averagePhysical : Double() from accumulate(
        Player($physical : physical) from $yourTeam.getPlayers(),
        average($physical)
    )

    $averagePace : Double() from accumulate(
        Player($pace : pace) from $yourTeam.getPlayers(),
        average($pace)
    )

    $averageShooting : Double() from accumulate(
        Player($shooting : shooting) from $yourTeam.getPlayers(),
        average($shooting)
    )

    $averageDribbling : Double() from accumulate(
        Player($dribbling : dribbling) from $yourTeam.getPlayers(),
        average($dribbling)
    )

    $averagePassing : Double() from accumulate(
        Player($passing : passing) from $yourTeam.getPlayers(),
        average($passing)
    )

    $averageDefending : Double() from accumulate(
        Player($defending : defending) from $yourTeam.getPlayers(),
        average($defending)
    )

    eval($averagePhysical > $averagePace + 3 && $averagePhysical > $averageShooting + 3 && $averagePhysical > $averageDribbling + 3 && $averagePhysical > $averagePassing + 3 && $averagePhysical > $averageDefending + 3)
then
    insertLogical(new Condition(ConditionType.K));
end

rule "M - Our team's average passing is greater than other attributes by 3"
salience 20
when
    $yourTeam : Team(teamType == TeamType.YOUR_TEAM)

    $averagePassing : Double() from accumulate(
        Player($passing : passing) from $yourTeam.getPlayers(),
        average($passing)
    )

    $averagePace : Double() from accumulate(
        Player($pace : pace) from $yourTeam.getPlayers(),
        average($pace)
    )

    $averageShooting : Double() from accumulate(
        Player($shooting : shooting) from $yourTeam.getPlayers(),
        average($shooting)
    )

    $averageDribbling : Double() from accumulate(
        Player($dribbling : dribbling) from $yourTeam.getPlayers(),
        average($dribbling)
    )

    $averageDefending : Double() from accumulate(
        Player($defending : defending) from $yourTeam.getPlayers(),
        average($defending)
    )

    $averagePhysical : Double() from accumulate(
        Player($physical : physical) from $yourTeam.getPlayers(),
        average($physical)
    )

    eval($averagePassing > $averagePace + 3 && $averagePassing > $averageShooting + 3 && $averagePassing > $averageDribbling + 3 && $averagePassing > $averageDefending + 3 && $averagePassing > $averagePhysical + 3)
then
    insertLogical(new Condition(ConditionType.M));
end

rule "O - Our team's average pace is greater than other attributes by 3"
salience 10
when
    $yourTeam : Team(teamType == TeamType.YOUR_TEAM)

    $averagePace : Double() from accumulate(
        Player($pace : pace) from $yourTeam.getPlayers(),
        average($pace)
    )

    $averageShooting : Double() from accumulate(
        Player($shooting : shooting) from $yourTeam.getPlayers(),
        average($shooting)
    )

    $averageDribbling : Double() from accumulate(
        Player($dribbling : dribbling) from $yourTeam.getPlayers(),
        average($dribbling)
    )

    $averagePassing : Double() from accumulate(
        Player($passing : passing) from $yourTeam.getPlayers(),
        average($passing)
    )

    $averageDefending : Double() from accumulate(
        Player($defending : defending) from $yourTeam.getPlayers(),
        average($defending)
    )

    $averagePhysical : Double() from accumulate(
        Player($physical : physical) from $yourTeam.getPlayers(),
        average($physical)
    )

    eval($averagePace > $averageShooting + 3 && $averagePace > $averageDribbling + 3 && $averagePace > $averagePassing + 3 && $averagePace > $averageDefending + 3 && $averagePace > $averagePhysical + 3)
then
    insertLogical(new Condition(ConditionType.O));
end

rule "P - None of K, M, O are true"
salience 0
when
    not (Condition(type == ConditionType.K) or Condition(type == ConditionType.M) or Condition(type == ConditionType.O))
then
    insertLogical(new Condition(ConditionType.P));
end

rule "Strategy 1 - A"
salience -10
when
    $conditionA : Condition(type == ConditionType.A)
then
    System.out.println("Strategy 1");
    System.out.println("Defensive Style: Drop Back");
    System.out.println("Width: 30");
    System.out.println("Depth: 25");
    System.out.println("Build Up Play: Long Ball");
    System.out.println("Chance Creation: Forward Runs");
    System.out.println("Width: 40");
    System.out.println("Players Run into Box: Low");
end

rule "Strategy 2 - B and D"
salience -20
when
    $conditionB : Condition(type == ConditionType.B)
    $conditionD : Condition(type == ConditionType.D)
then
    System.out.println("Strategy 2");
    System.out.println("Defensive Style: Pressure on Heavy Touch");
    System.out.println("Width: 50");
    System.out.println("Depth: 50");
    System.out.println("Build Up Play: Fast Build Up");
    System.out.println("Chance Creation: Direct Passing");
    System.out.println("Width: 60");
    System.out.println("Players Run into Box: Medium");
end

rule "Strategy 3 - B and E"
salience -30
when
    $conditionB : Condition(type == ConditionType.B)
    $conditionE : Condition(type == ConditionType.E)
then
    System.out.println("Strategy 3");
    System.out.println("Defensive Style: Constant Pressure");
    System.out.println("Width: 60");
    System.out.println("Depth: 70");
    System.out.println("Build Up Play: Fast Build Up");
    System.out.println("Chance Creation: Direct Passing");
    System.out.println("Width: 60");
    System.out.println("Players Run into Box: Medium");
end

rule "Strategy 4 - B and H"
salience -40
when
    $conditionB : Condition(type == ConditionType.B)
    $conditionH : Condition(type == ConditionType.H)
then
    System.out.println("Strategy 4");
    System.out.println("Defensive Style: Drop Back");
    System.out.println("Width: 50");
    System.out.println("Depth: 30");
    System.out.println("Build Up Play: Long Ball");
    System.out.println("Chance Creation: Forward Runs");
    System.out.println("Width: 65");
    System.out.println("Players Run into Box: High");
end

rule "Strategy 5 - J and K or C and K"
salience -50
when
    $conditionJ : Condition(type == ConditionType.J)
    $conditionK : Condition(type == ConditionType.K)
    or
    $conditionC : Condition(type == ConditionType.C)
    $conditionK : Condition(type == ConditionType.K)
then
    System.out.println("Strategy 5");
    System.out.println("Defensive Style: Constant Pressure");
    System.out.println("Width: 50");
    System.out.println("Depth: 70");
    System.out.println("Build Up Play: Fast Build Up");
    System.out.println("Chance Creation: Direct Passing");
    System.out.println("Width: 40");
    System.out.println("Players Run into Box: Very High");
end

rule "Strategy 6 - J and M or C and M"
salience -60
when
    $conditionJ : Condition(type == ConditionType.J)
    $conditionM : Condition(type == ConditionType.M)
    or
    $conditionC : Condition(type == ConditionType.C)
    $conditionM : Condition(type == ConditionType.M)
then
    System.out.println("Strategy 6");
    System.out.println("Defensive Style: Press After Possession Loss");
    System.out.println("Width: 70");
    System.out.println("Depth: 60");
    System.out.println("Build Up Play: Slow Build Up");
    System.out.println("Chance Creation: Possession");
    System.out.println("Width: 70");
    System.out.println("Players Run into Box: Very High");
end

rule "Strategy 7 - J and O or C and O"
salience -70
when
    $conditionJ : Condition(type == ConditionType.J)
    $conditionO : Condition(type == ConditionType.O)
    or
    $conditionC : Condition(type == ConditionType.C)
    $conditionO : Condition(type == ConditionType.O)
then
    System.out.println("Strategy 7");
    System.out.println("Defensive Style: Drop Back");
    System.out.println("Width: 60");
    System.out.println("Depth: 30");
    System.out.println("Build Up Play: Fast Build Up");
    System.out.println("Chance Creation: Forward Runs");
    System.out.println("Width: 70");
    System.out.println("Players Run into Box: Medium");
end

rule "Strategy 8 - J and P or C and P"
salience -80
when
    $conditionJ : Condition(type == ConditionType.J)
    $conditionP : Condition(type == ConditionType.P)
    or
    $conditionC : Condition(type == ConditionType.C)
    $conditionP : Condition(type == ConditionType.P)
then
    System.out.println("Strategy 8");
    System.out.println("Defensive Style: Balanced");
    System.out.println("Width: 50");
    System.out.println("Depth: 50");
    System.out.println("Build Up Play: Balanced");
    System.out.println("Chance Creation: Balanced");
    System.out.println("Width: 50");
    System.out.println("Players Run into Box: High");
end
